<html>
<head>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>

	<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.0/themes/smoothness/jquery-ui.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.0/jquery-ui.min.js"></script>

	<link rel="stylesheet" type="text/css" href="css/style.css">
	<title>Service Logs</title>
</head>
<body id="serviceLogs">

<div id="leftMenu" style="display:none">
{{#each cars}}
<div class="car" id="carId{{id}}">
	<a href="logs?carId={{id}}">{{name}}</a>
</div>
{{/each}}
</div>

<div id="mainBody">
<div class="header" style="float:left">
<div class="back"><img src="/images/arrow-back.png"/ id="leftMenuButton"></div>
<div class="title">{{car.name}}</div>
</div>
<form id="maintenance" action="#">
	<input name="carId" type="hidden" value="{{car.id}}"/>
<table>
<thead>
<tr>
<th class="date">Date</th>
<th class="mileage">Mileage</th>
<th class="service">Service</th>
<th class="cost">Cost</th>
<th class="notes">Notes</td>
<th></th>
<tr>
<td class="date"><input id="gridFriendlyDate" type="text"/><input id="gridServiceDate" name="serviceDate" type="hidden"/></td>
<td class="mileage"><input id="gridMileage" name="mileage" type="text"/></td>
<td class="service"><input id="gridService" name="service" type="text"/></td>
<td class="cost"><input id="gridCost" name="cost" type="text"/></td>
<td class="notes"><input id="gridNote" name="note" type="text"/><input type="submit" style="display:none"/></td>
<td></td>
</tr>
</thead>
<tbody id="logGrid" class="logAddEvent">
</tbody>
<tfoot>
<tr class="logUpdateEvent" style="display:none">
<td class="date"></td>
<td class="mileage"></td>
<td class="service"></td>
<td class="cost"></td>
<td class="notes"></td>
<td class="actions"><a href="#maintenanceId={{id}}">E</a></td>
</tr>
</tfoot>
</table>
</form>
</div>

<div id="editLogDialog">
	<form id="editMaintenance" action="#">
		<input id="editCarId" name="carId" type="hidden" value="{{car.id}}"/>
		<input id="editId" name="id" type="hidden"/>
		<label>Date:</label><input id="editFriendlyDate" type="text"/><input id="editServiceDate" name="serviceDate" type="hidden"/><br/>
		<label>Mileage:</label><input id="editMileage" name="mileage" type="text"/><br/>
		<label>Service:</label><input id="editService" name="service" type="text"/><br/>
		<label>Cost:</label><input id="editCost" name="cost" type="text"/><br/>
		<label>Note:</label><input id="editNote" name="note" type="text"/>
		<input id="editRegularService" name="regularService" type="checkbox"/><label id="editRegularServiceLabel" >Regular Service:</label>
		<div id="editServiceForm" style="display:none">
			<label>Mileage Interval:</label><input id="editMileageInterval" name="mileageInterval" type="text"/>
			<label>Months Interval:</label><input id="editMonthsInterval" name="monthsInterval" type="text"/>
		</div>
	</form>
</div>

<script>

$( document ).ready(function() {

	MAINTENANCELOG.setup();


	$('#leftMenuButton').on('click', function(e){
		$('#leftMenu').toggle();
	});

	$("#gridMileage").focus();

	m = new maintanenceLog();
	m.load({{car.id}}, function(logs) {
		//extracts all service from the log
		var allServices = [];
		for(var i = 0; i < logs.length; i++){
			allServices[i] = logs[i].service;
		}

		AUOTCOMPLETE.setup('#gridService', FILTERS.FILTER_CONTAINS, allServices);
		AUOTCOMPLETE.setup('#gridFriendlyDate', FILTERS.FILTER_STARTWITH, DATEUTILS.months);
		TABLEFILTER.setup('#gridService', FILTERS.FILTER_CONTAINS);
	});


}); 

var MAINTENANCELOG = {
	setup: function(){

		$("#maintenance").submit(function(e) {
			if (MAINTENANCELOG.validate()){
				//convert date
				var sqlDate = DATEUTILS.sql(new Date($("#gridFriendlyDate").val()));
				$("#gridServiceDate").val(sqlDate);
				var params = $('#maintenance').serializeArray();
				m.add(params);

				TABLEFILTER.clear();
				AUOTCOMPLETE.clear($("#gridService"));
				$("#gridCost").val("");
				$("#gridService").val("");
				$("#gridService").focus();

			}

			e.preventDefault();
		});	

		$('#editRegularService').on("click", function(e) {
			$('#editServiceForm').toggle();
		});

		//Adding row to grid when a log is added or page is loading
		$('#logGrid').on("logAdded", function(e) {
			MAINTENANCELOG.addLogRow(e.log);
		});

		//initialize editDialog
		$( "#editLogDialog" ).dialog({
            autoOpen: false, title: "Edit", modal: true,
            buttons: {
                OK: function() {
                	$(this).dialog("close");
					var sqlDate = DATEUTILS.sql(new Date($("#editFriendlyDate").val()));
					$("#editServiceDate").val(sqlDate);
        			var params = $('#editMaintenance').serializeArray();
                	m.update(params);

                	$('#editMileageInterval').val("");
                	$('#editMonthsInterval').val("");
                	$('#editRegularService').prop( "checked", false );
                	$('#editServiceForm').hide();


                }
            }

        });

		//add todays date as placeholder
		$('#gridFriendlyDate').attr("placeholder", DATEUTILS.format(new Date()));

	},
	addLogRow: function(log) {
		var newRow = $("table tfoot tr").clone();
		newRow.find(".date").html(DATEUTILS.format(new Date(log.serviceDate)));
		newRow.find(".mileage").html(log.mileage);
		newRow.find(".service").html(log.service);
		newRow.find(".cost").html(log.cost);
		newRow.find(".notes").html(log.notes);
		newRow.find(".actions A").attr("href", "#maintenanceId=" + log.id);
    	newRow.find(".actions A").on("click", function(e) {
    		var hashParam = UTILS.hashParam(e.currentTarget['href']);
			var logToEdit = m.get(hashParam['maintenanceId']);
			MAINTENANCELOG.openEditDialog(logToEdit);
    	});
		newRow.on("logUpdated", function(e) {
			MAINTENANCELOG.updateLogRow(newRow, e.log);
		});
		newRow.attr("data",log.service);
		newRow.addClass("log" + log.id);

		$("table tbody").prepend(newRow);
		newRow.show();
	},
	updateLogRow: function(row, log) {
		row.find(".date").html(DATEUTILS.format(new Date(log.serviceDate)));
		row.find(".mileage").html(log.mileage);
		row.find(".service").html(log.service);
		row.find(".cost").html(log.cost);
		row.find(".notes").html(log.notes);
		row.attr("data","service");
	},
	openEditDialog: function(log) {
	    $( "#editLogDialog" ).dialog( "open" );
	    $('#editFriendlyDate').val(DATEUTILS.format(new Date(log.serviceDate)));
		$("#editId").val(log.id);
		$("#editMileage").val(log.mileage);
		$("#editService").val(log.service);
		$("#editNote").val(log.note);
		$("#editCost").val(log.cost);
	},
	validate: function(){
		var serviceDate = $("#gridFriendlyDate").val(),
			isValidForm = true;

		if (serviceDate.length===0){
			serviceDate = $("#gridFriendlyDate").attr("placeholder");
			$("#gridFriendlyDate").val(serviceDate);
		} else {
			if (!DATEUTILS.isValid(serviceDate)) {
			 	$("#gridFriendlyDate").addClass("error");
			 	isValidForm = false;
			 }
		}


		var mileage = $("#gridMileage").val();
		if (!$.isNumeric(mileage)) {
			 	$("#gridMileage").addClass("error");
			 	isValidForm = false;
		} else {
	 		$("#gridMileage").removeClass("error");
	 	}

		var service = $("#gridService").val();
		if (service.length===0){
		 	$("#gridService").addClass("error");
		 	isValidForm = false;
		} else {
		 	$("#gridService").removeClass("error");
		}

		return isValidForm;
	}
}

var DATEUTILS = {
	regex: /^(January|February|March|April|May|June|July|August|September|November|December)\s\d{1,2},\s20\d\d$/i,
	format: function(d){
		return this.months[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear();
	},
	sql: function(d){
		return d.getFullYear() + "-" + (d.getMonth()+1) + "-" + d.getDate();
	},
	isValid: function(s) {
		return !(s.match(DATEUTILS.regex) === null);
	},
	months: ["January","February","March","April","May","June","July","August","September","October", "November","December"]
}

var FILTERS = {
	FILTER_STARTWITH: function(row, criteria){
		return row.startsWith(criteria);
	},

 	FILTER_CONTAINS: function(row, criteria){
		return row.contains(criteria);
	}
};

var TABLEFILTER = {
	setup: function(selector, filter) {
		$(selector).on('keypress', function(e){
			TABLEFILTER.filter($(this).data("inlineauto"), filter);
		});
	},
	filter: function (criteria, filter) {
		console.log("Filter: " + criteria);
			$("table tbody tr").each(function( index ) {
				if (filter($(this).attr("data"), criteria)) 
					$(this).show();
				else 
					$(this).hide();
			});
	},
	clear: function(){
		$("table tbody tr").show();
	}

};

var AUOTCOMPLETE = {
	setup: function(selector, filter, allValues) {
		$(selector).on('focus', function(e){
		    $(this).data("inlineauto",$(this).val())
		});
		$(selector).on('keypress', function(e){
			if (AUOTCOMPLETE.doComplete($(this), e.which, allValues, filter))
	        	e.preventDefault();
		});
		$(selector).on('keydown', function(e){
			if (e.which === 8){
		        if ($(this).data("inlineauto")){
		        	var curVal = $(this).data("inlineauto");
		        	var newVal = curVal.substring(0,curVal.length-1);
			        $(this).val(newVal);
				    $(this).data("inlineauto",newVal);
				    e.preventDefault();
				}
			}
		});
	},
	doComplete: function (inputField, keyChar, allValues, filter){
			var key = String.fromCharCode(keyChar),
	        	criteria;

			if (keyChar === 13){
				return false;
			}

	        //append current key to autocomplete
	        if (inputField.data("inlineauto")){
		        criteria = inputField.data("inlineauto") + key;
		    } else {
		    	criteria = key;
		    }

	        //save current autocomplete value
		    inputField.data("inlineauto",criteria);

	        console.log("Autocomplete: " + criteria);

	        //find matching values
	        var matched = jQuery.grep(allValues, function( n, i ){
	        	return filter(n,criteria);
	        });

	        //if no match set value to current autocomplete
	        if (matched.length==0) {
	        	inputField.val(criteria);
	    	} else {
	    		//display the match but keep cursor position
	        	inputField.val(matched[0]);
	        }

		    return true;
	},
	clear: function(inputField){
		inputField.val("");
		inputField.removeData("inlineauto");
	}

};

var UTILS = {
	hashParam: function(link){
		var hash = link.substring(link.indexOf('#')+1);
    	var params = hash.split('&');
    	var result = {};
    	for(var i = 0; i < params.length; i++){
       		var propval = params[i].split('=');
       		result[propval[0]] = propval[1];
       	}

       	return result;
	}
}


String.prototype.contains = function(it) { return this.indexOf(it) != -1; };
</script>
	<script src="scripts/maintenanceLog.js"></script>
<script type="text/javascript">

</script>
</body>
</html>
